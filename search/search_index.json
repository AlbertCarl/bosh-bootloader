{
    "docs": [
        {
            "location": "/",
            "text": "BOSH Bootloader\n\n\nAlso known as \nbbl\n \n(pronounced: \"bubble\")\n, bosh-bootloader is a command line\nutility for standing up a \nCloudFoundry\n or \nConcourse\n installation\non an IaaS.\n\n\nbbl\n currently supports AWS, GCP, Microsoft Azure, Openstack and vSphere.\n\n\n\n\nCI\n\n\nTracker\n\n\n\n\nWhat \nbbl\n does\n\n\n\n\nGenerate terraform template\n\n\nThe first step that \nbbl up\n does is to generate a Terraform template based on your IAAS, IAAS region, and chosen load balancer type (or lack thereof).\n\n\nThe resulting Terraform template is emitted to the \nterraform/bbl-template.tf\n file within your state directory.\n\n\nApply terraform template\n\n\nAfter generating the Terraform template, \nbbl up\n will run Terraform to apply that template, using also a variables file located at\n\nvars/bbl.tfvars\n within the state directory.\n\n\nMap terraform outputs to BOSH create-env vars\n\n\nHaving applied the Terraform template, we now have a number of Terraform outputs, such as subnet CIDRs, reserved IP addresses, and load balancer configuration.\n\nbbl\n will transform those outputs into the inputs required by \njumpbox-deployment\n and \nbosh-deployment\n and write them to the files \nvars/jumpbox-vars-file.yml\n\nand \nvars/director-vars-file.yml\n.\n\n\nExecute BOSH create-env (jumpbox, director)\n\n\nNext, \nbbl\n shells out to the BOSH CLI to run \nbosh create-env\n twice. The first time, \nbbl\n uses \njumpbox-deployment\n and creates the jumpbox vm; the second time,\n\nbbl\n uses \nbosh-deployment\n and creates the director VM. The exact commands that \nbbl\n will run are emitted to the \ncreate-jumpbox.sh\n and \ncreate-director.sh\n\nfiles within the state directory.\n\n\nGenerate cloud-config template\n\n\nAfter the director VM comes up, \nbbl\n generates a base cloud-config, based on the IAAS, IAAS region, and chosen load balancer type.\n\n\nMap TErraform outputs to BOSH cloud-config vars\n\n\nHaving generated a base cloud-config template, \nbbl\n maps Terraform outputs to cloud-config variables. These variables include network and subnetwork names,\nsecurity groups or tags, and CIDR ranges, as well as load balancer target pool names.\n\n\nUpdate cloud-config (director)\n\n\nFinally, \nbbl\n will update the director's cloud config, by shelling out to \nbosh update-cloud-config\n.",
            "title": "BOSH Bootloader"
        },
        {
            "location": "/#bosh-bootloader",
            "text": "Also known as  bbl   (pronounced: \"bubble\") , bosh-bootloader is a command line\nutility for standing up a  CloudFoundry  or  Concourse  installation\non an IaaS.  bbl  currently supports AWS, GCP, Microsoft Azure, Openstack and vSphere.   CI  Tracker",
            "title": "BOSH Bootloader"
        },
        {
            "location": "/#what-bbl-does",
            "text": "",
            "title": "What bbl does"
        },
        {
            "location": "/#generate-terraform-template",
            "text": "The first step that  bbl up  does is to generate a Terraform template based on your IAAS, IAAS region, and chosen load balancer type (or lack thereof).  The resulting Terraform template is emitted to the  terraform/bbl-template.tf  file within your state directory.",
            "title": "Generate terraform template"
        },
        {
            "location": "/#apply-terraform-template",
            "text": "After generating the Terraform template,  bbl up  will run Terraform to apply that template, using also a variables file located at vars/bbl.tfvars  within the state directory.",
            "title": "Apply terraform template"
        },
        {
            "location": "/#map-terraform-outputs-to-bosh-create-env-vars",
            "text": "Having applied the Terraform template, we now have a number of Terraform outputs, such as subnet CIDRs, reserved IP addresses, and load balancer configuration. bbl  will transform those outputs into the inputs required by  jumpbox-deployment  and  bosh-deployment  and write them to the files  vars/jumpbox-vars-file.yml \nand  vars/director-vars-file.yml .",
            "title": "Map terraform outputs to BOSH create-env vars"
        },
        {
            "location": "/#execute-bosh-create-env-jumpbox-director",
            "text": "Next,  bbl  shells out to the BOSH CLI to run  bosh create-env  twice. The first time,  bbl  uses  jumpbox-deployment  and creates the jumpbox vm; the second time, bbl  uses  bosh-deployment  and creates the director VM. The exact commands that  bbl  will run are emitted to the  create-jumpbox.sh  and  create-director.sh \nfiles within the state directory.",
            "title": "Execute BOSH create-env (jumpbox, director)"
        },
        {
            "location": "/#generate-cloud-config-template",
            "text": "After the director VM comes up,  bbl  generates a base cloud-config, based on the IAAS, IAAS region, and chosen load balancer type.",
            "title": "Generate cloud-config template"
        },
        {
            "location": "/#map-terraform-outputs-to-bosh-cloud-config-vars",
            "text": "Having generated a base cloud-config template,  bbl  maps Terraform outputs to cloud-config variables. These variables include network and subnetwork names,\nsecurity groups or tags, and CIDR ranges, as well as load balancer target pool names.",
            "title": "Map TErraform outputs to BOSH cloud-config vars"
        },
        {
            "location": "/#update-cloud-config-director",
            "text": "Finally,  bbl  will update the director's cloud config, by shelling out to  bosh update-cloud-config .",
            "title": "Update cloud-config (director)"
        },
        {
            "location": "/advanced-configuration/",
            "text": "Advanced configuration\n\n\nTable of Contents\n\n\n\n\nUsing a BOSH ops-file with bbl\n\n\nCustomizing IaaS Paving with Terraform\n\n\nApplying and authoring plan patches, bundled modifications to default bbl configurations.\n\n\n\n\nUsing a BOSH ops-file with bbl\n\n\nAbout BOSH ops-files\n\n\nCertain features of BOSH, particularly experimental features or tuning parameters, must be enabled by modifying your\nDirector's deployment manifest. \nbosh-deployment\n contains many such \nops files\n for common features and options.\n\n\nUsing the pre-made operations files\n\n\nYou can provide any number of ops files or variables to \nbosh create-env\n by creating \ncreate-director-override.sh\n. This file will not be overridden by bbl. You can use \ncreate-director.sh\n as a template, and you can even edit that file instead, but if you do, your changes will be overridden the next time you run \nbbl plan\n.\n\n\nIn this example, I use a local version of BOSH director that I have built based off of a branch by referencing an ops file that is included as part of \nbosh-deployment\n:\n\n\nbosh create-env \\\n  ${BBL_STATE_DIR}/bosh-deployment/bosh.yml \\\n  --state  ${BBL_STATE_DIR}/vars/bosh-state.json \\\n  --vars-store  ${BBL_STATE_DIR}/vars/director-vars-store.yml \\\n  --vars-file  ${BBL_STATE_DIR}/vars/director-vars-file.yml \\\n+  -o ${BBL_STATE_DIR}/bosh-deployment/local-bosh-release.yml\n+  -v local_bosh_release=${BBL_STATE_DIR}/../../build/bosh-dev.tgz\n  -o  ${BBL_STATE_DIR}/bosh-deployment/cpi.yml \\\n  -o  ${BBL_STATE_DIR}/bosh-deployment/jumpbox-user.yml \\\n  -o  ${BBL_STATE_DIR}/bosh-deployment/uaa.yml \\\n  -o  ${BBL_STATE_DIR}/../shared/bosh-deployment/credhub.yml \n\n\n\n\nAuthoring an ops-file\n\n\nThe \noperations files\n provided by \nbosh-deployment\n may not meet your needs. In this case you will have to write your own\ncustom ops-file. Store it somewhere outside of the bosh-deployment directory. New versions of bbl will keep the\nbosh-deployment directory in sync with the latest configuration and releases, so modifications may be lost when\n\nbbl plan\n is run in the future. Consider storing it in the top level of your state directory if it is environmentally\nspecific, or above the state directory if it is true for all environments.\n\n\nHere is an example of adding an ops file that configures a few settings on all of my BOSH directors:  \n\n\n#!/bin/sh\nbosh create-env \\\n  ${BBL_STATE_DIR}/bosh-deployment/bosh.yml \\\n  --state  ${BBL_STATE_DIR}/vars/bosh-state.json \\\n  --vars-store  ${BBL_STATE_DIR}/vars/director-vars-store.yml \\\n  --vars-file  ${BBL_STATE_DIR}/vars/director-vars-file.yml \\\n+  -o ${BBL_STATE_DIR}/../../bbl-envs/shared/increase-workers-threads-and-flush-arp.yml\n  -o  ${BBL_STATE_DIR}/bosh-deployment/cpi.yml \\\n  -o  ${BBL_STATE_DIR}/bosh-deployment/jumpbox-user.yml \\\n  -o  ${BBL_STATE_DIR}/bosh-deployment/uaa.yml \\\n  -o  ${BBL_STATE_DIR}/../shared/bosh-deployment/credhub.yml\n\n\n\n\nCustomizing IaaS Paving with Terraform\n\n\nNumerous settings can be reconfigured repeatedly by editing \n$BBL_STATE_DIR/vars/terraform.tfvars\n or adding a terraform override into  \n$BBL_STATE_DIR/terraform/my-cool-template-override.tf\n. Some settings, like VPCs, are not able to be changed after initial creation so it may be better to \nbbl plan\n first before running \nbbl up\n for the first time.\n\n\nExample: adjusting the cidr on AWS\n\n\n\n\nPlan the environment:\n    \nmkdir some-env \n cd some-env\n    export BBL_IAAS=aws\n    export BBL_AWS_REGION=us-west-1\n    export BBL_AWS_ACCESS_KEY_ID=12345678\n    export BBL_AWS_SECRET_ACCESS_KEY=12345678\n    bbl plan\n    echo -e \"\\nvpc_cidr=\\\"192.168.0.0/20\\\"\" \n vars/terraform.tfvars\n\n\nCreate the environment:\n    \nbbl up\n\n    That's it. Your director is now at \n192.168.0.6\n.\n\n\n\n\n \nPlan Patches\n\n\nThrough operations files and terraform overrides, all sorts of wild modifications can be done to the vanilla bosh environments that bbl creates. The basic principal of a plan patch is to make several modifications to a bbl plan in override files that bbl finds under \nterraform/\n, \ncloud-config/\n, and \n{create,delete}-{jumpbox,director}.sh\n . BBL will read and merge those into it's plan when you run \nbbl up\n.\n\n\nWe've used plan patches to \ndeploy bosh-lite directors on gcp\n, to deploy CF Isolation Segments on \npublic\n \nclouds\n, and to deploy bosh managed k8s clusters with working cloud-providers using \ncfcr\n.\n\n\nOur plan patches are experimental. They were tested a bit when we wrote them, but we don't continuously integrate against their dependencies or even check if they still work with recent versions of terraform. They should be used with caution. Operators should make sure they understand each modification and its implications before using our patches in their own environments. Regardless, the plan-patches in this repo are great examples of the different ways you can configure bbl to deploy whatever you might need. To see all the plan patches, visit the \nPlan Patches README.md\n. If you write your own plan patch that gets you what you need, please consider upstreaming it in a PR.",
            "title": "Advanced configuration"
        },
        {
            "location": "/advanced-configuration/#advanced-configuration",
            "text": "",
            "title": "Advanced configuration"
        },
        {
            "location": "/advanced-configuration/#table-of-contents",
            "text": "Using a BOSH ops-file with bbl  Customizing IaaS Paving with Terraform  Applying and authoring plan patches, bundled modifications to default bbl configurations.",
            "title": "Table of Contents"
        },
        {
            "location": "/advanced-configuration/#about-bosh-ops-files",
            "text": "Certain features of BOSH, particularly experimental features or tuning parameters, must be enabled by modifying your\nDirector's deployment manifest.  bosh-deployment  contains many such  ops files  for common features and options.",
            "title": "About BOSH ops-files"
        },
        {
            "location": "/advanced-configuration/#using-the-pre-made-operations-files",
            "text": "You can provide any number of ops files or variables to  bosh create-env  by creating  create-director-override.sh . This file will not be overridden by bbl. You can use  create-director.sh  as a template, and you can even edit that file instead, but if you do, your changes will be overridden the next time you run  bbl plan .  In this example, I use a local version of BOSH director that I have built based off of a branch by referencing an ops file that is included as part of  bosh-deployment :  bosh create-env \\\n  ${BBL_STATE_DIR}/bosh-deployment/bosh.yml \\\n  --state  ${BBL_STATE_DIR}/vars/bosh-state.json \\\n  --vars-store  ${BBL_STATE_DIR}/vars/director-vars-store.yml \\\n  --vars-file  ${BBL_STATE_DIR}/vars/director-vars-file.yml \\\n+  -o ${BBL_STATE_DIR}/bosh-deployment/local-bosh-release.yml\n+  -v local_bosh_release=${BBL_STATE_DIR}/../../build/bosh-dev.tgz\n  -o  ${BBL_STATE_DIR}/bosh-deployment/cpi.yml \\\n  -o  ${BBL_STATE_DIR}/bosh-deployment/jumpbox-user.yml \\\n  -o  ${BBL_STATE_DIR}/bosh-deployment/uaa.yml \\\n  -o  ${BBL_STATE_DIR}/../shared/bosh-deployment/credhub.yml",
            "title": "Using the pre-made operations files"
        },
        {
            "location": "/advanced-configuration/#authoring-an-ops-file",
            "text": "The  operations files  provided by  bosh-deployment  may not meet your needs. In this case you will have to write your own\ncustom ops-file. Store it somewhere outside of the bosh-deployment directory. New versions of bbl will keep the\nbosh-deployment directory in sync with the latest configuration and releases, so modifications may be lost when bbl plan  is run in the future. Consider storing it in the top level of your state directory if it is environmentally\nspecific, or above the state directory if it is true for all environments.  Here is an example of adding an ops file that configures a few settings on all of my BOSH directors:    #!/bin/sh\nbosh create-env \\\n  ${BBL_STATE_DIR}/bosh-deployment/bosh.yml \\\n  --state  ${BBL_STATE_DIR}/vars/bosh-state.json \\\n  --vars-store  ${BBL_STATE_DIR}/vars/director-vars-store.yml \\\n  --vars-file  ${BBL_STATE_DIR}/vars/director-vars-file.yml \\\n+  -o ${BBL_STATE_DIR}/../../bbl-envs/shared/increase-workers-threads-and-flush-arp.yml\n  -o  ${BBL_STATE_DIR}/bosh-deployment/cpi.yml \\\n  -o  ${BBL_STATE_DIR}/bosh-deployment/jumpbox-user.yml \\\n  -o  ${BBL_STATE_DIR}/bosh-deployment/uaa.yml \\\n  -o  ${BBL_STATE_DIR}/../shared/bosh-deployment/credhub.yml",
            "title": "Authoring an ops-file"
        },
        {
            "location": "/advanced-configuration/#example-adjusting-the-cidr-on-aws",
            "text": "Plan the environment:\n     mkdir some-env   cd some-env\n    export BBL_IAAS=aws\n    export BBL_AWS_REGION=us-west-1\n    export BBL_AWS_ACCESS_KEY_ID=12345678\n    export BBL_AWS_SECRET_ACCESS_KEY=12345678\n    bbl plan\n    echo -e \"\\nvpc_cidr=\\\"192.168.0.0/20\\\"\"   vars/terraform.tfvars  Create the environment:\n     bbl up \n    That's it. Your director is now at  192.168.0.6 .",
            "title": "Example: adjusting the cidr on AWS"
        },
        {
            "location": "/advanced-configuration/#plan-patches",
            "text": "Through operations files and terraform overrides, all sorts of wild modifications can be done to the vanilla bosh environments that bbl creates. The basic principal of a plan patch is to make several modifications to a bbl plan in override files that bbl finds under  terraform/ ,  cloud-config/ , and  {create,delete}-{jumpbox,director}.sh  . BBL will read and merge those into it's plan when you run  bbl up .  We've used plan patches to  deploy bosh-lite directors on gcp , to deploy CF Isolation Segments on  public   clouds , and to deploy bosh managed k8s clusters with working cloud-providers using  cfcr .  Our plan patches are experimental. They were tested a bit when we wrote them, but we don't continuously integrate against their dependencies or even check if they still work with recent versions of terraform. They should be used with caution. Operators should make sure they understand each modification and its implications before using our patches in their own environments. Regardless, the plan-patches in this repo are great examples of the different ways you can configure bbl to deploy whatever you might need. To see all the plan patches, visit the  Plan Patches README.md . If you write your own plan patch that gets you what you need, please consider upstreaming it in a PR.",
            "title": " Plan Patches"
        },
        {
            "location": "/cf-lbs/",
            "text": "Cloud Foundry Load Balancers\n\n\nAWS\n\n\nbbl\n creates 3 load balancers on AWS.\n\n\n\n\n\n\ncf-ssh-lb\n\n\n\n\nIn the cloud-config, this lb is referenced with the vm extension \ndiego-ssh-proxy-network-properties\n.\n\n\nIn cf-deployment, this vm extension will be associated with the \nscheduler\n vm.\n\n\nIt forwards \nTCP:2222\n to \nTCP:2222\n.\n\n\n\n\n\n\n\n\ncf-tcp-lb\n\n\n\n\nIn the cloud-config, this lb is referenced with the vm extension \ncf-tcp-router-network-properties\n.\n\n\nIn cf-deployment, this vm extension will be associated with the \ntcp-router\n vm.\n\n\nIt forwards \nTCP:1024-1123\n to \nTCP:1024-1123\n.\n\n\n\n\n\n\n\n\ncf-router-lb\n\n\n\n\nIn the cloud-config, this lb is referenced with the vm extension \ncf-router-network-properties\n.\n\n\nIn cf-deployment, this vm extension will be associated with the \nrouter\n vm.\n\n\nIt forwards:\n\n\nHTTP:80\n   to \nHTTP:80\n\n\nHTTPS:443\n to \nHTTP:80\n\n\nTLS:4443\n  to \nTCP:80\n\n\n\n\n\n\n\n\n\n\n\n\nGCP\n\n\nbbl\n creates 4 load balancers on GCP.\n\n\n\n\n\n\ncf-router-lb\n\n\n\n\nIn the cloud-config, this lb is referenced with the vm extension \ncf-router-network-properties\n.\n\n\nIn cf-deployment, this vm extension will be associated with the \nrouter\n vm.\n\n\nConfiguration:\n\n\nCompute address\n\n\nBackend service with an instance group per availability zone\n\n\nInstance group per availability zone allowing \nhttps:443\n\n\nFirewall rule allowing \ntcp:80\n \n \ntcp:443\n to the backend service\n\n\nHealth check for \ntcp:8080\n \n \ntcp:80\n\n\n\n\n\n\n\n\n\n\n\n\ncf-ws-lb\n\n\n\n\nIn the cloud-config, this lb is referenced with the vm extension \ncf-router-network-properties\n.\n\n\nIn cf-deployment, this vm extension will be associated with the \nrouter\n vm.\n\n\nConfiguration:\n\n\nCompute address\n\n\nTarget pool\n\n\nForwarding rule allowing \ntcp:443\n to the target pool\n\n\nForwarding rule allowing \ntcp:80\n to the target pool\n\n\n\n\n\n\n\n\n\n\n\n\ncf-tcp-router-lb\n\n\n\n\nIn the cloud-config, this lb is referenced with the vm extension \ncf-tcp-router-network-properties\n.\n\n\nIn cf-deployment, this vm extension will be associated with the \ntcp-router\n vm.\n\n\nConfiguration:\n\n\nCompute address\n\n\nTarget pool\n\n\nFirewall rule allowing \ntcp:1024-32768\n to the target pool\n\n\nForwarding rule for \ntcp:1024-32768\n to the target pool\n\n\n\n\n\n\n\n\n\n\n\n\ncf-ssh-proxy-lb\n\n\n\n\nIn the cloud-config, this lb is referenced with the vm extension \ndiego-ssh-proxy-network-properties\n.\n\n\nIn cf-deployment, this vm extension will be associated with the \nscheduler\n vm.\n\n\nConfiguration:\n\n\nCompute address\n\n\nTarget pool\n\n\nFirewall rule allowing \ntcp:2222\n to the target pool\n\n\nForwarding rule for \ntcp:2222\n to the target pool\n\n\n\n\n\n\n\n\n\n\n\n\nMicrosoft Azure\n\n\nbbl\n creates an application gateway on Microsoft Azure.\n\n\n\n\ncf-app-gateway\n\n\nIn the cloud-config, this lb is referenced with the vm extension \ncf-router-network-properties\n.\n\n\nIn cf-deployment, this vm extension will be associated with the \nrouter\n vm.\n\n\nConfiguration:\n\n\nPublic IP\n\n\nApplication Gateway\n\n\nNetwork Security Rules\n\n\nNetwork Security Group\n\n\n\n\n\n\n\n\n\n\n\n\nvSphere\n\n\nN/A.\n\n\nOpenStack\n\n\nN/A.",
            "title": "Cloud Foundry Load Balancers"
        },
        {
            "location": "/cf-lbs/#cloud-foundry-load-balancers",
            "text": "",
            "title": "Cloud Foundry Load Balancers"
        },
        {
            "location": "/cf-lbs/#aws",
            "text": "bbl  creates 3 load balancers on AWS.    cf-ssh-lb   In the cloud-config, this lb is referenced with the vm extension  diego-ssh-proxy-network-properties .  In cf-deployment, this vm extension will be associated with the  scheduler  vm.  It forwards  TCP:2222  to  TCP:2222 .     cf-tcp-lb   In the cloud-config, this lb is referenced with the vm extension  cf-tcp-router-network-properties .  In cf-deployment, this vm extension will be associated with the  tcp-router  vm.  It forwards  TCP:1024-1123  to  TCP:1024-1123 .     cf-router-lb   In the cloud-config, this lb is referenced with the vm extension  cf-router-network-properties .  In cf-deployment, this vm extension will be associated with the  router  vm.  It forwards:  HTTP:80    to  HTTP:80  HTTPS:443  to  HTTP:80  TLS:4443   to  TCP:80",
            "title": "AWS"
        },
        {
            "location": "/cf-lbs/#gcp",
            "text": "bbl  creates 4 load balancers on GCP.    cf-router-lb   In the cloud-config, this lb is referenced with the vm extension  cf-router-network-properties .  In cf-deployment, this vm extension will be associated with the  router  vm.  Configuration:  Compute address  Backend service with an instance group per availability zone  Instance group per availability zone allowing  https:443  Firewall rule allowing  tcp:80     tcp:443  to the backend service  Health check for  tcp:8080     tcp:80       cf-ws-lb   In the cloud-config, this lb is referenced with the vm extension  cf-router-network-properties .  In cf-deployment, this vm extension will be associated with the  router  vm.  Configuration:  Compute address  Target pool  Forwarding rule allowing  tcp:443  to the target pool  Forwarding rule allowing  tcp:80  to the target pool       cf-tcp-router-lb   In the cloud-config, this lb is referenced with the vm extension  cf-tcp-router-network-properties .  In cf-deployment, this vm extension will be associated with the  tcp-router  vm.  Configuration:  Compute address  Target pool  Firewall rule allowing  tcp:1024-32768  to the target pool  Forwarding rule for  tcp:1024-32768  to the target pool       cf-ssh-proxy-lb   In the cloud-config, this lb is referenced with the vm extension  diego-ssh-proxy-network-properties .  In cf-deployment, this vm extension will be associated with the  scheduler  vm.  Configuration:  Compute address  Target pool  Firewall rule allowing  tcp:2222  to the target pool  Forwarding rule for  tcp:2222  to the target pool",
            "title": "GCP"
        },
        {
            "location": "/cf-lbs/#microsoft-azure",
            "text": "bbl  creates an application gateway on Microsoft Azure.   cf-app-gateway  In the cloud-config, this lb is referenced with the vm extension  cf-router-network-properties .  In cf-deployment, this vm extension will be associated with the  router  vm.  Configuration:  Public IP  Application Gateway  Network Security Rules  Network Security Group",
            "title": "Microsoft Azure"
        },
        {
            "location": "/cf-lbs/#vsphere",
            "text": "N/A.",
            "title": "vSphere"
        },
        {
            "location": "/cf-lbs/#openstack",
            "text": "N/A.",
            "title": "OpenStack"
        },
        {
            "location": "/cleaning-up/",
            "text": "Cleaning Up\n\n\nIn addition to creating resources for deploying BOSH, bbl has two subcommands\nfor assisting you in cleaning up an environment after you are done with it:\n\nbbl down\n and \nbbl cleanup-leftovers\n.\n\n\nbbl down\n\n\nIf you have the state file for a working environment, then bbl will destroy\neverything it has created.\n\n\nAs a safety precaution, bbl will not delete the\nenvironment if there are running VMs deployed by the BOSH director.\n\n\nbbl down\n\n\n\n\nbbl cleanup-leftovers\n\n\nSometimes, \nbbl down\n isn't enough to do the job.\nPerhaps you are in one of these situations:\n\n\n\n\nbbl down\n failed during deletion and lost information.\n\n\nThe \nbbl-state-dir\n is on a computer that you no longer have access to.\n\n\nYou created resources outside of bbl that you want to nuke.\n\n\nYou are running bbl's acceptance tests and they failed, orphaning IaaS resources.\n\n\n\n\nTo assist with these situations, we have incorporated the\ncli utility \nleftovers\n as a\nsubcommand in bbl.\n\n\nYou can think of \nbbl cleanup-leftovers\n as kind of like\n\nbbl down --force\n, but without the need for a \nbbl-state-dir\n.\n\n\nThe filter is very important!\n\n\nIf \n--filter\n is omitted, bbl will begin to delete \nALL\n of your IaaS account's resources.\n\n\nFor example, if you had a bbl environment with a name autogenerated by bbl\nyou could supply part of the name to delete it:\n\n\nexport BBL_IAAS=aws\nexport BBL_AWS_SECRET_ACCESS_KEY=foo\nexport BBL_AWS_ACCESS_KEY_ID=bar\n\nbbl cleanup-leftovers --filter malawi\n\n\n\n\nThis will begin to delete each resource with a name or tag matching \"malawi\",\nconfirming each one before deletion.\n\n\nUse caution with your filters, because you may have more than one environment\nwith the same \"Lake Name\". To delete all resources with that name without\nneeding to confirming each one individually use \n--no-confim\n:\n\n\nbbl cleanup-leftovers --filter malawi --no-confirm\n\n\n\n\nbbl cleanup-leftovers\n will do the best it can to delete in an order\nsuch that all resources can be deleted without dependency errors.\n\n\nHowever, \nrunning cleanup-leftovers repeatedly\n may be enough to resolve dependency errors.",
            "title": "Cleaning Up"
        },
        {
            "location": "/cleaning-up/#cleaning-up",
            "text": "In addition to creating resources for deploying BOSH, bbl has two subcommands\nfor assisting you in cleaning up an environment after you are done with it: bbl down  and  bbl cleanup-leftovers .",
            "title": "Cleaning Up"
        },
        {
            "location": "/cleaning-up/#bbl-down",
            "text": "If you have the state file for a working environment, then bbl will destroy\neverything it has created.  As a safety precaution, bbl will not delete the\nenvironment if there are running VMs deployed by the BOSH director.  bbl down",
            "title": "bbl down"
        },
        {
            "location": "/cleaning-up/#bbl-cleanup-leftovers",
            "text": "Sometimes,  bbl down  isn't enough to do the job.\nPerhaps you are in one of these situations:   bbl down  failed during deletion and lost information.  The  bbl-state-dir  is on a computer that you no longer have access to.  You created resources outside of bbl that you want to nuke.  You are running bbl's acceptance tests and they failed, orphaning IaaS resources.   To assist with these situations, we have incorporated the\ncli utility  leftovers  as a\nsubcommand in bbl.  You can think of  bbl cleanup-leftovers  as kind of like bbl down --force , but without the need for a  bbl-state-dir .  The filter is very important!  If  --filter  is omitted, bbl will begin to delete  ALL  of your IaaS account's resources.  For example, if you had a bbl environment with a name autogenerated by bbl\nyou could supply part of the name to delete it:  export BBL_IAAS=aws\nexport BBL_AWS_SECRET_ACCESS_KEY=foo\nexport BBL_AWS_ACCESS_KEY_ID=bar\n\nbbl cleanup-leftovers --filter malawi  This will begin to delete each resource with a name or tag matching \"malawi\",\nconfirming each one before deletion.  Use caution with your filters, because you may have more than one environment\nwith the same \"Lake Name\". To delete all resources with that name without\nneeding to confirming each one individually use  --no-confim :  bbl cleanup-leftovers --filter malawi --no-confirm  bbl cleanup-leftovers  will do the best it can to delete in an order\nsuch that all resources can be deleted without dependency errors.  However,  running cleanup-leftovers repeatedly  may be enough to resolve dependency errors.",
            "title": "bbl cleanup-leftovers"
        },
        {
            "location": "/cloudfoundry/",
            "text": "Generic Steps for Cloud Foundry Deployment\n\n\n\n\n\n\nCreate an environment and target the BOSH director with \neval \"$(bbl print-env)\"\n\n\n\n\n\n\nbbl plan --lb-type cf --lb-cert \nPATH_TO_CERT_FILE\n --lb-key \nPATH_TO_KEY_FILE\n \n bbl up\n. You can use existing certificate and key files, or generate new ones. See below for instructions on generating these files for Microsoft Azure.\n\n\n\n\n\n\nbosh deploy cf-deployment.yml -o operations/\nMY IaaS\n using the \nCF deployment manifest!\n\n\n\n\n\n\nAppendix: Generating Load Balancer Key and Certificate Files for Microsoft Azure\n\n\nTo create Cloud Foundry load balancers for Microsoft Azure you must provide a certificate\nin the \n.pfx\n format:\n\n\nopenssl genrsa -out DOMAIN_NAME.key 2048\nopenssl req -new -x509 -days 365 -key DOMAIN_NAME.key -out DOMAIN_NAME.crt\nopenssl pkcs12 -export -out PFX_FILE -inkey DOMAIN_NAME.key -in DOMAIN_NAME.crt\n\n\n\n\nSave the password you entered when prompted by \nopenssl\n to a file.\n\n\necho SuperSecretPassword \n PFX_FILE_PASSWORD\n\n\n\n\nTo \nbbl  plan\n or \nbbl up\n you can provide the \n.pfx\n file and password:\n\n\nbbl plan --lb-type cf --lb-cert PFX_FILE --lb-key PFX_FILE_PASSWORD",
            "title": "Generic Steps for Cloud Foundry Deployment"
        },
        {
            "location": "/cloudfoundry/#generic-steps-for-cloud-foundry-deployment",
            "text": "Create an environment and target the BOSH director with  eval \"$(bbl print-env)\"    bbl plan --lb-type cf --lb-cert  PATH_TO_CERT_FILE  --lb-key  PATH_TO_KEY_FILE    bbl up . You can use existing certificate and key files, or generate new ones. See below for instructions on generating these files for Microsoft Azure.    bosh deploy cf-deployment.yml -o operations/ MY IaaS  using the  CF deployment manifest!",
            "title": "Generic Steps for Cloud Foundry Deployment"
        },
        {
            "location": "/cloudfoundry/#appendix-generating-load-balancer-key-and-certificate-files-for-microsoft-azure",
            "text": "To create Cloud Foundry load balancers for Microsoft Azure you must provide a certificate\nin the  .pfx  format:  openssl genrsa -out DOMAIN_NAME.key 2048\nopenssl req -new -x509 -days 365 -key DOMAIN_NAME.key -out DOMAIN_NAME.crt\nopenssl pkcs12 -export -out PFX_FILE -inkey DOMAIN_NAME.key -in DOMAIN_NAME.crt  Save the password you entered when prompted by  openssl  to a file.  echo SuperSecretPassword   PFX_FILE_PASSWORD  To  bbl  plan  or  bbl up  you can provide the  .pfx  file and password:  bbl plan --lb-type cf --lb-cert PFX_FILE --lb-key PFX_FILE_PASSWORD",
            "title": "Appendix: Generating Load Balancer Key and Certificate Files for Microsoft Azure"
        },
        {
            "location": "/concourse/",
            "text": "Generic Steps for Concourse Deployment\n\n\nThis document will walk through deploying a concourse clustered\ninstall using \nbbl\n and \nbosh\n.\n\n\nPrerequisites\n\n\n\n\nbbl\n\n\nbosh v2\n\n\nconcourse/concourse-bosh-deployment\n\n\n\n\nSteps\n\n\n\n\nCreate an environment and upload a stemcell.\n\n\n\n\n```bash\n  bbl up --lb-type concourse\n\n\nexport external_url=\"https://$(bbl lbs | awk -F': ' '{print $2}')\"\n\n\neval \"$(bbl print-env)\"\n\n\nbosh upload-stemcell https://bosh.io/d/stemcells/bosh-google-kvm-ubuntu-trusty-go_agent\n\n\ncd $GOPATH/src/github.com/concourse/concourse-bosh-deployment/cluster\n  ```\n\n\n\n\nDeploy concourse.\n\n\n\n\nbash\n  bosh deploy -d concourse concourse.yml \\\n    -l ../versions.yml \\\n    --vars-store cluster-creds.yml \\\n    -o operations/no-auth.yml \\\n    -o operations/privileged-http.yml \\\n    -o operations/privileged-https.yml \\\n    -o operations/tls.yml \\\n    -o operations/tls-vars.yml \\\n    -o operations/web-network-extension.yml \\\n    --var network_name=default \\\n    --var external_url=$external_url \\\n    --var web_vm_type=default \\\n    --var db_vm_type=default \\\n    --var db_persistent_disk_type=10GB \\\n    --var worker_vm_type=default \\\n    --var deployment_name=concourse \\\n    --var web_network_name=private \\\n    --var web_network_vm_extension=lb\n\n\nVerify\n\n\nPoint your browser to \n$external_url\n.",
            "title": "Generic Steps for Concourse Deployment"
        },
        {
            "location": "/concourse/#generic-steps-for-concourse-deployment",
            "text": "This document will walk through deploying a concourse clustered\ninstall using  bbl  and  bosh .",
            "title": "Generic Steps for Concourse Deployment"
        },
        {
            "location": "/concourse/#prerequisites",
            "text": "bbl  bosh v2  concourse/concourse-bosh-deployment",
            "title": "Prerequisites"
        },
        {
            "location": "/concourse/#steps",
            "text": "Create an environment and upload a stemcell.   ```bash\n  bbl up --lb-type concourse  export external_url=\"https://$(bbl lbs | awk -F': ' '{print $2}')\"  eval \"$(bbl print-env)\"  bosh upload-stemcell https://bosh.io/d/stemcells/bosh-google-kvm-ubuntu-trusty-go_agent  cd $GOPATH/src/github.com/concourse/concourse-bosh-deployment/cluster\n  ```   Deploy concourse.   bash\n  bosh deploy -d concourse concourse.yml \\\n    -l ../versions.yml \\\n    --vars-store cluster-creds.yml \\\n    -o operations/no-auth.yml \\\n    -o operations/privileged-http.yml \\\n    -o operations/privileged-https.yml \\\n    -o operations/tls.yml \\\n    -o operations/tls-vars.yml \\\n    -o operations/web-network-extension.yml \\\n    --var network_name=default \\\n    --var external_url=$external_url \\\n    --var web_vm_type=default \\\n    --var db_vm_type=default \\\n    --var db_persistent_disk_type=10GB \\\n    --var worker_vm_type=default \\\n    --var deployment_name=concourse \\\n    --var web_network_name=private \\\n    --var web_network_vm_extension=lb",
            "title": "Steps"
        },
        {
            "location": "/concourse/#verify",
            "text": "Point your browser to  $external_url .",
            "title": "Verify"
        },
        {
            "location": "/credhub/",
            "text": "Accessing the BOSH Director CredHub\n\n\nUsing \nCREDHUB_PROXY\n\n\nRequirements\n\n\n\n\nbbl v6.2\n or above\n\n\ncredhub-cli v1.6.0\n or above\n\n\na bbl environment\n\n\n\n\nInstructions\n\n\n\n\n\n\nSet necessary environment variables\n\n\nbbl print-env\n prints out environment variables (\nCREDHUB_CLIENT\n, \nCREDHUB_SECRET\n, \nCREDHUB_PROXY\n,\n\nCREDHUB_SERVER\n, \nCREDHUB_CA_CERT\n, and others) that need to be exported to target the Director CredHub using the CredHub CLI.\n\n\neval \"$(bbl print-env)\"\n\n\n\n\n\n\nGet credentials\n\n\nhttp_proxy=socks5://localhost:5000 credhub find -n 'cf_admin_password'\n\n\nThe CredHub CLI will parse \nCREDHUB_PROXY\n and determines from the \nssh+socks5://\n scheme that it should proxy throuhg a jumpbox via a tunnel of its own making.\n\n\n\n\n\n\nUsing \nhttp_proxy\n\n\nRequirements\n\n\n\n\nbbl\n\n\ncredhub-cli\n\n\na bbl environment\n\n\n\n\nInstructions\n\n\n\n\n\n\nSet your CredHub client/secret\n\n\neval \"$(bbl print-env)\"\n\n\n\n\n\n\nMake an SSH tunnel to the jumpbox\n\n\nbbl ssh-key \n /tmp/jumpbox.key\nchmod 0700 /tmp/jumpbox.key\nssh -4 -D 5000 -fNC jumpbox@`bbl jumpbox-address` -i /tmp/jumpbox.key\n\n\n\n\n\n\nLogin\n\n\nhttp_proxy=socks5://localhost:5000 credhub login\n\n\n\n\n\n\nGet credentials\n\n\nhttp_proxy=socks5://localhost:5000 credhub find -n 'cf_admin_password'",
            "title": "Accessing the BOSH Director CredHub"
        },
        {
            "location": "/credhub/#accessing-the-bosh-director-credhub",
            "text": "",
            "title": "Accessing the BOSH Director CredHub"
        },
        {
            "location": "/credhub/#using-credhub_proxy",
            "text": "",
            "title": "Using CREDHUB_PROXY"
        },
        {
            "location": "/credhub/#requirements",
            "text": "bbl v6.2  or above  credhub-cli v1.6.0  or above  a bbl environment",
            "title": "Requirements"
        },
        {
            "location": "/credhub/#instructions",
            "text": "Set necessary environment variables  bbl print-env  prints out environment variables ( CREDHUB_CLIENT ,  CREDHUB_SECRET ,  CREDHUB_PROXY , CREDHUB_SERVER ,  CREDHUB_CA_CERT , and others) that need to be exported to target the Director CredHub using the CredHub CLI.  eval \"$(bbl print-env)\"    Get credentials  http_proxy=socks5://localhost:5000 credhub find -n 'cf_admin_password'  The CredHub CLI will parse  CREDHUB_PROXY  and determines from the  ssh+socks5://  scheme that it should proxy throuhg a jumpbox via a tunnel of its own making.",
            "title": "Instructions"
        },
        {
            "location": "/credhub/#using-http_proxy",
            "text": "",
            "title": "Using http_proxy"
        },
        {
            "location": "/credhub/#requirements_1",
            "text": "bbl  credhub-cli  a bbl environment",
            "title": "Requirements"
        },
        {
            "location": "/credhub/#instructions_1",
            "text": "Set your CredHub client/secret  eval \"$(bbl print-env)\"    Make an SSH tunnel to the jumpbox  bbl ssh-key   /tmp/jumpbox.key\nchmod 0700 /tmp/jumpbox.key\nssh -4 -D 5000 -fNC jumpbox@`bbl jumpbox-address` -i /tmp/jumpbox.key    Login  http_proxy=socks5://localhost:5000 credhub login    Get credentials  http_proxy=socks5://localhost:5000 credhub find -n 'cf_admin_password'",
            "title": "Instructions"
        },
        {
            "location": "/customization/",
            "text": "Customizing your infrastructure and director\n\n\nSince version 5.2.0, \nbbl\n has allowed customizing the infrastructure and director by editing files within the bbl state dir. This is a guide to which files can and can't\nbe customized.\n\n\n\n\nFiles and directories that cannot be overridden or customized\n\n\nThere are 3 directories and one file in the \nbbl\n state directory which should not be modified by the user.\n\n\nbbl-ops-files\n\n\nThe \nbbl-ops-files\n directory contains ops files for \nbosh-deployment\n and \njumpbox-deployment\n which are used by \nbbl\n but not part of the main \nbosh-deployment\n or\n\njumpbox-deployment\n repositories.\n\n\nbbl-state.json\n\n\nThe \nbbl-state.json\n file is used to keep track of several different aspects of state that aren't captured by the rest of the state dir:\n- load balancer type, cert, and key\n- most recent output from Terraform (useful when running without \n--debug\n; this will be printed when running \nbbl latest-error\n)\n- BOSH director information, including:\n  - username and password\n  - address\n  - SSL certificate, private key, and CA\n- jumpbox URL\n- environment name\n- IAAS\n- \nbbl\n version used to create the state\n\n\nbosh-deployment\n\n\nThis is a copy of the \ncloudfoundry/bosh-deployment\n Git repository. It contains the base BOSH director manifest, as well\nas ops files that configure the CPI, add UAA and Credhub to the director, and allow SSH access to the director. The entire repository is provided, not just the files that\n\nbbl\n uses in its default director \ncreate-env\n script.\n\n\njumpbox-deployment\n\n\nThis is a copy of the \ncppforlife/jumpbox-deployment\n Git repository. It contains the base jumpbox manifest, as well\nas ops files that configure the CPI. As with the \nbosh-deployment\n directory, the entire Git repository is provided, not just the files \nbbl\n uses.\n\n\nOverride scripts\n\n\nTo create and destroy the jumpbox and director deployments, \nbbl\n does not shell out directly to the BOSH CLI. Instead, it uses four wrapper scripts, which are emitted into\nthe root of the state directory as \ncreate-jumpbox.sh\n, \ncreate-director.sh\n, \ndelete-jumpbox.sh\n, and \ndelete-director.sh\n. These files will be rewritten when running\n\nbbl plan\n, so editing them directly is not recommended. However, if a file with the name \ncreate-jumpbox-override.sh\n is present in the root of the state directory,\n\nbbl\n will run that script \ninstead\n of \ncreate-jumpbox.sh\n when creating a jumpbox. The same goes for the other counterparts: \ncreate-director-override.sh\n, \ndelete-\njumpbox-override.sh\n, and \ndelete-director-override.sh\n.\n\n\nDirectories where the user can add files\n\n\ncloud-config\n\n\nAny ops file with a name of the form \n*.yml\n that is added to the \ncloud-config\n directory will be used as an ops file argument by \nbbl\n when it runs \nupdate-cloud-config\n.\nThe ops files will be applied in alphabetical order.\n\n\nModifying the \ncloud-config.yml\n and \nops.yml\n files directly is not recommended if you can avoid it, as these files will be rewritten on \nbbl plan\n, while other files in\nthe directory will be preserved even if you re-run \nbbl plan\n.\n\n\nterraform\n\n\nAdding an HCL file with a \n*.tf\n filename to the \nterraform\n directory will effectively \nappend\n that file to the \nbbl\n terraform template. Adding an HCL file with a\n\n*_override.tf\n filename will \nmerge\n that file with the \nbbl\n terraform template when \nbbl\n runs \nterraform apply\n or \nterraform destroy\n. If you are modifying any \nbbl\n-\nprovided Terraform resources using a custom Terraform file, we recommend that you end your filename in \n_override.tf\n in order for Terraform to properly process those\nmodifications.\n\n\nChanges to the \nbbl.tf\n file will be lost on re-running \nbbl plan\n, but all other files in the directory will not be modified.\n\n\nvars\n\n\nAdding a file with a \n*.tfvars\n filename to the \nvars\n directory will allow custom variables to be picked up by Terraform when \nbbl\n runs \nterraform apply\n. The general\nformat of a \ntfvars\n file is \nkey=\"value\"\n. Values longer than one line can be provided using heredoc syntax, for instance:\n\n\naws_iam_access_policy = \nEOF\n{\n  \nVersion\n: \n2012-10-17\n,\n  \nStatement\n: [\n    {\n      ...\n    }\n  ]\n}\nEOF\n\n\n\n\nModifying the \nbbl.tfvars\n file directly can change the variables used in the base Terraform template; however, this is not recommended since these variables are\ngenerated by \nbbl\n from credentials and other user-provided settings and may be overwritten by subsequent \nbbl\n runs. Instead, you should alter the input to \nbbl plan\n.\n\n\nbbl\n provides several files within the \nvars\n directory, and will edit them on subsequent runs. These files include:\n- \nbbl.tfvars\n - used by \nbbl\n to provide credentials and other user-provided settings to Terraform\n- \nbosh-state.json\n - used by the BOSH CLI to store state for the BOSH director deployment\n- \ncloud-config-vars.yml\n - used by \nbbl\n to provide Terraform outputs to the BOSH cloud-config\n- \ndirector-vars-file.yml\n - used by \nbbl\n to provide Terraform outputs to the BOSH create-env call for the director\n- \ndirector-vars-store.yml\n - used by the BOSH CLI to store generated variables for the BOSH director deployment\n- \njumpbox-state.json\n - used by the BOSH CLI to store state for the jumpbox deployment\n- \njumpbox-vars-file.yml\n - used by \nbbl\n to provide Terraform outputs to the BOSH create-env call for the jumpbox\n- \njumpbox-vars-store.yml\n - used by the BOSH CLI to store generated variables for the BOSH jumpbox deployment\n- \nterraform.tfstate\n and \nterraform.tfstate.backup\n - used by the Terraform CLI to store state\n\n\nThese files should not be edited by the user. All other files placed in the \nvars\n directory are safe and will not be modified by \nbbl\n.",
            "title": "Customizing your infrastructure and director"
        },
        {
            "location": "/customization/#customizing-your-infrastructure-and-director",
            "text": "Since version 5.2.0,  bbl  has allowed customizing the infrastructure and director by editing files within the bbl state dir. This is a guide to which files can and can't\nbe customized.",
            "title": "Customizing your infrastructure and director"
        },
        {
            "location": "/customization/#files-and-directories-that-cannot-be-overridden-or-customized",
            "text": "There are 3 directories and one file in the  bbl  state directory which should not be modified by the user.",
            "title": "Files and directories that cannot be overridden or customized"
        },
        {
            "location": "/customization/#bbl-ops-files",
            "text": "The  bbl-ops-files  directory contains ops files for  bosh-deployment  and  jumpbox-deployment  which are used by  bbl  but not part of the main  bosh-deployment  or jumpbox-deployment  repositories.",
            "title": "bbl-ops-files"
        },
        {
            "location": "/customization/#bbl-statejson",
            "text": "The  bbl-state.json  file is used to keep track of several different aspects of state that aren't captured by the rest of the state dir:\n- load balancer type, cert, and key\n- most recent output from Terraform (useful when running without  --debug ; this will be printed when running  bbl latest-error )\n- BOSH director information, including:\n  - username and password\n  - address\n  - SSL certificate, private key, and CA\n- jumpbox URL\n- environment name\n- IAAS\n-  bbl  version used to create the state",
            "title": "bbl-state.json"
        },
        {
            "location": "/customization/#bosh-deployment",
            "text": "This is a copy of the  cloudfoundry/bosh-deployment  Git repository. It contains the base BOSH director manifest, as well\nas ops files that configure the CPI, add UAA and Credhub to the director, and allow SSH access to the director. The entire repository is provided, not just the files that bbl  uses in its default director  create-env  script.",
            "title": "bosh-deployment"
        },
        {
            "location": "/customization/#jumpbox-deployment",
            "text": "This is a copy of the  cppforlife/jumpbox-deployment  Git repository. It contains the base jumpbox manifest, as well\nas ops files that configure the CPI. As with the  bosh-deployment  directory, the entire Git repository is provided, not just the files  bbl  uses.",
            "title": "jumpbox-deployment"
        },
        {
            "location": "/customization/#override-scripts",
            "text": "To create and destroy the jumpbox and director deployments,  bbl  does not shell out directly to the BOSH CLI. Instead, it uses four wrapper scripts, which are emitted into\nthe root of the state directory as  create-jumpbox.sh ,  create-director.sh ,  delete-jumpbox.sh , and  delete-director.sh . These files will be rewritten when running bbl plan , so editing them directly is not recommended. However, if a file with the name  create-jumpbox-override.sh  is present in the root of the state directory, bbl  will run that script  instead  of  create-jumpbox.sh  when creating a jumpbox. The same goes for the other counterparts:  create-director-override.sh ,  delete-\njumpbox-override.sh , and  delete-director-override.sh .",
            "title": "Override scripts"
        },
        {
            "location": "/customization/#directories-where-the-user-can-add-files",
            "text": "",
            "title": "Directories where the user can add files"
        },
        {
            "location": "/customization/#cloud-config",
            "text": "Any ops file with a name of the form  *.yml  that is added to the  cloud-config  directory will be used as an ops file argument by  bbl  when it runs  update-cloud-config .\nThe ops files will be applied in alphabetical order.  Modifying the  cloud-config.yml  and  ops.yml  files directly is not recommended if you can avoid it, as these files will be rewritten on  bbl plan , while other files in\nthe directory will be preserved even if you re-run  bbl plan .",
            "title": "cloud-config"
        },
        {
            "location": "/customization/#terraform",
            "text": "Adding an HCL file with a  *.tf  filename to the  terraform  directory will effectively  append  that file to the  bbl  terraform template. Adding an HCL file with a *_override.tf  filename will  merge  that file with the  bbl  terraform template when  bbl  runs  terraform apply  or  terraform destroy . If you are modifying any  bbl -\nprovided Terraform resources using a custom Terraform file, we recommend that you end your filename in  _override.tf  in order for Terraform to properly process those\nmodifications.  Changes to the  bbl.tf  file will be lost on re-running  bbl plan , but all other files in the directory will not be modified.",
            "title": "terraform"
        },
        {
            "location": "/customization/#vars",
            "text": "Adding a file with a  *.tfvars  filename to the  vars  directory will allow custom variables to be picked up by Terraform when  bbl  runs  terraform apply . The general\nformat of a  tfvars  file is  key=\"value\" . Values longer than one line can be provided using heredoc syntax, for instance:  aws_iam_access_policy =  EOF\n{\n   Version :  2012-10-17 ,\n   Statement : [\n    {\n      ...\n    }\n  ]\n}\nEOF  Modifying the  bbl.tfvars  file directly can change the variables used in the base Terraform template; however, this is not recommended since these variables are\ngenerated by  bbl  from credentials and other user-provided settings and may be overwritten by subsequent  bbl  runs. Instead, you should alter the input to  bbl plan .  bbl  provides several files within the  vars  directory, and will edit them on subsequent runs. These files include:\n-  bbl.tfvars  - used by  bbl  to provide credentials and other user-provided settings to Terraform\n-  bosh-state.json  - used by the BOSH CLI to store state for the BOSH director deployment\n-  cloud-config-vars.yml  - used by  bbl  to provide Terraform outputs to the BOSH cloud-config\n-  director-vars-file.yml  - used by  bbl  to provide Terraform outputs to the BOSH create-env call for the director\n-  director-vars-store.yml  - used by the BOSH CLI to store generated variables for the BOSH director deployment\n-  jumpbox-state.json  - used by the BOSH CLI to store state for the jumpbox deployment\n-  jumpbox-vars-file.yml  - used by  bbl  to provide Terraform outputs to the BOSH create-env call for the jumpbox\n-  jumpbox-vars-store.yml  - used by the BOSH CLI to store generated variables for the BOSH jumpbox deployment\n-  terraform.tfstate  and  terraform.tfstate.backup  - used by the Terraform CLI to store state  These files should not be edited by the user. All other files placed in the  vars  directory are safe and will not be modified by  bbl .",
            "title": "vars"
        },
        {
            "location": "/getting-started-aws/",
            "text": "Getting Started: AWS\n\n\nThis guide is a walkthrough for deploying a BOSH director with \nbbl\n\non AWS. Upon completion, you will have the following:\n\n\n\n\nA BOSH director\n\n\nA jumpbox\n\n\nA set of randomly generated BOSH director credentials\n\n\nA generated keypair allowing you to SSH into the BOSH director and\nany instances BOSH deploys\n\n\nA copy of the manifest the BOSH director was deployed with\n\n\nA basic cloud config\n\n\n\n\nCreating an IAM user\n\n\nIn order for \nbbl\n to interact with AWS, an \nIAM\n user must be created.\n\n\nThis user will be issuing API requests to create the infrastructure such\nas EC2 instances, load balancers, subnets, etc.\n\n\nThe user must have the following \npolicy\n:\n\n\n{\n    \nVersion\n: \n2012-10-17\n,\n    \nStatement\n: [\n        {\n            \nSid\n: \nVisualEditor0\n,\n            \nEffect\n: \nAllow\n,\n            \nAction\n: [\n                \nlogs:*\n,\n                \nelasticloadbalancing:*\n,\n                \ncloudformation:*\n,\n                \niam:*\n,\n                \nkms:*\n,\n                \nroute53:*\n,\n                \nec2:*\n\n            ],\n            \nResource\n: \n*\n\n        }\n    ]\n}\n\n\n\n\nTo create a user and associated policy with the AWS CLI run the \nfollowing commands (policy text must be in your clipboard):\n\n\n$ aws iam create-user --user-name \nbbl-user\n\n$ aws iam put-user-policy --user-name \nbbl-user\n \\\n    --policy-name \nbbl-policy\n \\\n    --policy-document \n$(pbpaste)\n\n$ aws iam create-access-key --user-name \nbbl-user\n\n\n\n\n\nThe \ncreate-access-key\n command will write an \"access key id\" and \"secret \naccess key\" to the terminal. These values are important and should\nbe kept secret. In the next section \nbbl\n will use these commands to\ncreate infrastructure on AWS.\n\n\nPave Infrastructure, Create a Jumpbox, and Create a BOSH Director\n\n\nbbl\n will create infrastructure and deploy a BOSH director with the\nfollowing command:\n\n\nbbl up \\\n    --aws-access-key-id \nINSERT ACCESS KEY ID\n \\\n    --aws-secret-access-key \nINSERT SECRET ACCESS KEY\n \\\n    --aws-region us-west-1 \\\n    --iaas aws\n\n\n\n\nThe process takes around 5-8 minutes.\n\n\nThe bbl state directory contains all of the files that were used to\ncreate your bosh director. This should be checked in to version control,\nso that you have all the information necessary to later destroy or\nupdate this environment at a later date.\n\n\nNext Steps\n\n\n\n\nTarget the BOSH Director\n\n\nDeploy Cloud Foundry\n\n\nDeploy Concourse",
            "title": "Getting Started: AWS"
        },
        {
            "location": "/getting-started-aws/#getting-started-aws",
            "text": "This guide is a walkthrough for deploying a BOSH director with  bbl \non AWS. Upon completion, you will have the following:   A BOSH director  A jumpbox  A set of randomly generated BOSH director credentials  A generated keypair allowing you to SSH into the BOSH director and\nany instances BOSH deploys  A copy of the manifest the BOSH director was deployed with  A basic cloud config",
            "title": "Getting Started: AWS"
        },
        {
            "location": "/getting-started-aws/#creating-an-iam-user",
            "text": "In order for  bbl  to interact with AWS, an  IAM  user must be created.  This user will be issuing API requests to create the infrastructure such\nas EC2 instances, load balancers, subnets, etc.  The user must have the following  policy :  {\n     Version :  2012-10-17 ,\n     Statement : [\n        {\n             Sid :  VisualEditor0 ,\n             Effect :  Allow ,\n             Action : [\n                 logs:* ,\n                 elasticloadbalancing:* ,\n                 cloudformation:* ,\n                 iam:* ,\n                 kms:* ,\n                 route53:* ,\n                 ec2:* \n            ],\n             Resource :  * \n        }\n    ]\n}  To create a user and associated policy with the AWS CLI run the \nfollowing commands (policy text must be in your clipboard):  $ aws iam create-user --user-name  bbl-user \n$ aws iam put-user-policy --user-name  bbl-user  \\\n    --policy-name  bbl-policy  \\\n    --policy-document  $(pbpaste) \n$ aws iam create-access-key --user-name  bbl-user   The  create-access-key  command will write an \"access key id\" and \"secret \naccess key\" to the terminal. These values are important and should\nbe kept secret. In the next section  bbl  will use these commands to\ncreate infrastructure on AWS.",
            "title": "Creating an IAM user"
        },
        {
            "location": "/getting-started-aws/#pave-infrastructure-create-a-jumpbox-and-create-a-bosh-director",
            "text": "bbl  will create infrastructure and deploy a BOSH director with the\nfollowing command:  bbl up \\\n    --aws-access-key-id  INSERT ACCESS KEY ID  \\\n    --aws-secret-access-key  INSERT SECRET ACCESS KEY  \\\n    --aws-region us-west-1 \\\n    --iaas aws  The process takes around 5-8 minutes.  The bbl state directory contains all of the files that were used to\ncreate your bosh director. This should be checked in to version control,\nso that you have all the information necessary to later destroy or\nupdate this environment at a later date.",
            "title": "Pave Infrastructure, Create a Jumpbox, and Create a BOSH Director"
        },
        {
            "location": "/getting-started-aws/#next-steps",
            "text": "Target the BOSH Director  Deploy Cloud Foundry  Deploy Concourse",
            "title": "Next Steps"
        },
        {
            "location": "/getting-started-azure/",
            "text": "Getting Started: Microsoft Azure\n\n\nThis guide is a walkthrough for deploying a BOSH director with \nbbl\n\non Microsoft Azure. Upon completion, you will have the following:\n\n\n\n\nA BOSH director\n\n\nA jumpbox\n\n\nA set of randomly generated BOSH director credentials\n\n\nA generated keypair allowing you to SSH into the BOSH director and\nany instances BOSH deploys\n\n\nA copy of the manifest the BOSH director was deployed with\n\n\nA basic cloud config\n\n\n\n\nCreate a Service Principal Account\n\n\nYou can use the cli utility \naz-automation\n\nfor creating a service principal account given you\nhave authenticated with the \naz\n cli.\n\n\nThe output will include your subscription id,\nyour tenant id, the client id, and the client secret.\n\n\nThese credentials will be passed to \nbbl\n so that\nit can interact with Azure.\n\n\nPave Infrastructure, Create a Jumpbox, and Create a BOSH Director\n\n\n\n\nExport environment variables.\n    \nexport BBL_IAAS=azure\n    export BBL_AZURE_CLIENT_ID=\n    export BBL_AZURE_CLIENT_SECRET=\n    export BBL_AZURE_REGION=\n    export BBL_AZURE_SUBSCRIPTION_ID=\n    export BBL_AZURE_TENANT_ID=\n\n\nCreate infrastructure, jumpbox, and bosh director.\n    \nbbl up\n\n\n\n\nNext Steps\n\n\n\n\nTarget the BOSH Director\n\n\nDeploy Cloud Foundry\n\n\nDeploy Concourse",
            "title": "Getting Started: Microsoft Azure"
        },
        {
            "location": "/getting-started-azure/#getting-started-microsoft-azure",
            "text": "This guide is a walkthrough for deploying a BOSH director with  bbl \non Microsoft Azure. Upon completion, you will have the following:   A BOSH director  A jumpbox  A set of randomly generated BOSH director credentials  A generated keypair allowing you to SSH into the BOSH director and\nany instances BOSH deploys  A copy of the manifest the BOSH director was deployed with  A basic cloud config",
            "title": "Getting Started: Microsoft Azure"
        },
        {
            "location": "/getting-started-azure/#create-a-service-principal-account",
            "text": "You can use the cli utility  az-automation \nfor creating a service principal account given you\nhave authenticated with the  az  cli.  The output will include your subscription id,\nyour tenant id, the client id, and the client secret.  These credentials will be passed to  bbl  so that\nit can interact with Azure.",
            "title": "Create a Service Principal Account"
        },
        {
            "location": "/getting-started-azure/#pave-infrastructure-create-a-jumpbox-and-create-a-bosh-director",
            "text": "Export environment variables.\n     export BBL_IAAS=azure\n    export BBL_AZURE_CLIENT_ID=\n    export BBL_AZURE_CLIENT_SECRET=\n    export BBL_AZURE_REGION=\n    export BBL_AZURE_SUBSCRIPTION_ID=\n    export BBL_AZURE_TENANT_ID=  Create infrastructure, jumpbox, and bosh director.\n     bbl up",
            "title": "Pave Infrastructure, Create a Jumpbox, and Create a BOSH Director"
        },
        {
            "location": "/getting-started-azure/#next-steps",
            "text": "Target the BOSH Director  Deploy Cloud Foundry  Deploy Concourse",
            "title": "Next Steps"
        },
        {
            "location": "/getting-started-gcp/",
            "text": "Getting Started: GCP\n\n\nThis guide is a walkthrough for deploying a BOSH director with \nbbl\n\non GCP. Upon completion, you will have the following:\n\n\n\n\nA BOSH director\n\n\nA jumpbox\n\n\nA set of randomly generated BOSH director credentials\n\n\nA generated keypair allowing you to SSH into the BOSH director and\nany instances BOSH deploys\n\n\nA copy of the manifest the BOSH director was deployed with\n\n\nA basic cloud config\n\n\n\n\nCreate a Service Account\n\n\nIn order for \nbbl\n to interact with GCP, a service account must be created.\n\n\ngcloud iam service-accounts create \nservice account name\n\n\ngcloud iam service-accounts keys create --iam-account='\nservice account name\n@\nproject id\n.iam.gserviceaccount.com' \nservice account name\n.key.json\n\ngcloud projects add-iam-policy-binding \nproject id\n --member='serviceAccount:\nservice account name\n@\nproject id\n.iam.gserviceaccount.com' --role='roles/editor'\n\n\n\n\nPave Infrastructure, Create a Jumpbox, and Create a BOSH Director\n\n\n\n\nExport environment variables.\n    \nexport BBL_IAAS=gcp\n    export BBL_GCP_REGION=\n    export BBL_GCP_SERVICE_ACCOUNT_KEY=\n\n\nCreate infrastructure, jumpbox, and bosh director.\n    \nbbl up\n\n\n\n\nNext Steps\n\n\n\n\nTarget the BOSH Director\n\n\nDeploy Cloud Foundry\n\n\nDeploy Concourse",
            "title": "Getting Started: GCP"
        },
        {
            "location": "/getting-started-gcp/#getting-started-gcp",
            "text": "This guide is a walkthrough for deploying a BOSH director with  bbl \non GCP. Upon completion, you will have the following:   A BOSH director  A jumpbox  A set of randomly generated BOSH director credentials  A generated keypair allowing you to SSH into the BOSH director and\nany instances BOSH deploys  A copy of the manifest the BOSH director was deployed with  A basic cloud config",
            "title": "Getting Started: GCP"
        },
        {
            "location": "/getting-started-gcp/#create-a-service-account",
            "text": "In order for  bbl  to interact with GCP, a service account must be created.  gcloud iam service-accounts create  service account name \n\ngcloud iam service-accounts keys create --iam-account=' service account name @ project id .iam.gserviceaccount.com'  service account name .key.json\n\ngcloud projects add-iam-policy-binding  project id  --member='serviceAccount: service account name @ project id .iam.gserviceaccount.com' --role='roles/editor'",
            "title": "Create a Service Account"
        },
        {
            "location": "/getting-started-gcp/#pave-infrastructure-create-a-jumpbox-and-create-a-bosh-director",
            "text": "Export environment variables.\n     export BBL_IAAS=gcp\n    export BBL_GCP_REGION=\n    export BBL_GCP_SERVICE_ACCOUNT_KEY=  Create infrastructure, jumpbox, and bosh director.\n     bbl up",
            "title": "Pave Infrastructure, Create a Jumpbox, and Create a BOSH Director"
        },
        {
            "location": "/getting-started-gcp/#next-steps",
            "text": "Target the BOSH Director  Deploy Cloud Foundry  Deploy Concourse",
            "title": "Next Steps"
        },
        {
            "location": "/getting-started-openstack/",
            "text": "Getting Started: OpenStack\n\n\nThis guide is a walkthrough for deploying a BOSH director with \nbbl\n\non OpenStack. Upon completion, you will have the following:\n\n\n\n\nA BOSH director\n\n\nA jumpbox\n\n\nA set of randomly generated BOSH director credentials\n\n\nA generated keypair allowing you to SSH into the BOSH director and\nany instances BOSH deploys\n\n\nA copy of the manifest the BOSH director was deployed with\n\n\nA basic cloud config\n\n\n\n\nbbl\n creates and maintains the lifecycle of the jumpbox and BOSH director.\n\n\nIt does not create any networks, security groups, or load balancers on OpenStack.\n\n\nCreate a Jumpbox and a BOSH Director\n\n\n\n\nExport environment variables.\n    \nexport BBL_IAAS=openstack\n    export BBL_OPENSTACK_INTERNAL_CIDR=\n    export BBL_OPENSTACK_EXTERNAL_IP=\n    export BBL_OPENSTACK_AUTH_URL=\n    export BBL_OPENSTACK_AZ=\n    export BBL_OPENSTACK_DEFAULT_KEY_NAME=\n    export BBL_OPENSTACK_DEFAULT_SECURITY_GROUP=\n    export BBL_OPENSTACK_NETWORK_ID=\n    export BBL_OPENSTACK_PASSWORD=\n    export BBL_OPENSTACK_USERNAME=\n    export BBL_OPENSTACK_PROJECT=\n    export BBL_OPENSTACK_DOMAIN=\n    export BBL_OPENSTACK_REGION=\n    export BBL_OPENSTACK_PRIVATE_KEY=\n\n\nCreate jumpbox and bosh director.\n    \nbbl up\n\n\n\n\nNext Steps\n\n\n\n\nTarget the BOSH Director",
            "title": "Getting Started: OpenStack"
        },
        {
            "location": "/getting-started-openstack/#getting-started-openstack",
            "text": "This guide is a walkthrough for deploying a BOSH director with  bbl \non OpenStack. Upon completion, you will have the following:   A BOSH director  A jumpbox  A set of randomly generated BOSH director credentials  A generated keypair allowing you to SSH into the BOSH director and\nany instances BOSH deploys  A copy of the manifest the BOSH director was deployed with  A basic cloud config   bbl  creates and maintains the lifecycle of the jumpbox and BOSH director.  It does not create any networks, security groups, or load balancers on OpenStack.",
            "title": "Getting Started: OpenStack"
        },
        {
            "location": "/getting-started-openstack/#create-a-jumpbox-and-a-bosh-director",
            "text": "Export environment variables.\n     export BBL_IAAS=openstack\n    export BBL_OPENSTACK_INTERNAL_CIDR=\n    export BBL_OPENSTACK_EXTERNAL_IP=\n    export BBL_OPENSTACK_AUTH_URL=\n    export BBL_OPENSTACK_AZ=\n    export BBL_OPENSTACK_DEFAULT_KEY_NAME=\n    export BBL_OPENSTACK_DEFAULT_SECURITY_GROUP=\n    export BBL_OPENSTACK_NETWORK_ID=\n    export BBL_OPENSTACK_PASSWORD=\n    export BBL_OPENSTACK_USERNAME=\n    export BBL_OPENSTACK_PROJECT=\n    export BBL_OPENSTACK_DOMAIN=\n    export BBL_OPENSTACK_REGION=\n    export BBL_OPENSTACK_PRIVATE_KEY=  Create jumpbox and bosh director.\n     bbl up",
            "title": "Create a Jumpbox and a BOSH Director"
        },
        {
            "location": "/getting-started-openstack/#next-steps",
            "text": "Target the BOSH Director",
            "title": "Next Steps"
        },
        {
            "location": "/getting-started-vsphere/",
            "text": "Getting Started: vSphere\n\n\nThis guide is a walkthrough for deploying a BOSH director with \nbbl\n\non vSphere. Upon completion, you will have the following:\n\n\n\n\nA BOSH director\n\n\nA jumpbox\n\n\nA set of randomly generated BOSH director credentials\n\n\nA generated keypair allowing you to SSH into the BOSH director and\nany instances BOSH deploys\n\n\nA copy of the manifest the BOSH director was deployed with\n\n\nA basic cloud config\n\n\n\n\nbbl\n creates and maintains the lifecycle of the jumpbox and BOSH director.\n\n\nIt does not create any networks, security groups, or load balancers on vSphere.\n\n\nCreate a Jumpbox and a BOSH Director\n\n\n\n\n\n\nExport environment variables.\n    \nexport BBL_IAAS=vsphere\n    export BBL_VSPHERE_VCENTER_USER\n    export BBL_VSPHERE_VCENTER_PASSWORD\n    export BBL_VSPHERE_VCENTER_IP\n    export BBL_VSPHERE_VCENTER_DC\n    export BBL_VSPHERE_VCENTER_CLUSTER\n    export BBL_VSPHERE_VCENTER_RP\n    export BBL_VSPHERE_NETWORK\n    export BBL_VSPHERE_VCENTER_DS\n    export BBL_VSPHERE_SUBNET\n    export BBL_VSPHERE_VCENTER_DISKS\n    export BBL_VSPHERE_VCENTER_TEMPLATES\n    export BBL_VSPHERE_VCENTER_VMS\n\n\n\n\n\n\nCreate jumpbox and bosh director.\n    \nbbl up\n\n\n\n\n\n\nNext Steps\n\n\n\n\nTarget the BOSH Director",
            "title": "Getting Started: vSphere"
        },
        {
            "location": "/getting-started-vsphere/#getting-started-vsphere",
            "text": "This guide is a walkthrough for deploying a BOSH director with  bbl \non vSphere. Upon completion, you will have the following:   A BOSH director  A jumpbox  A set of randomly generated BOSH director credentials  A generated keypair allowing you to SSH into the BOSH director and\nany instances BOSH deploys  A copy of the manifest the BOSH director was deployed with  A basic cloud config   bbl  creates and maintains the lifecycle of the jumpbox and BOSH director.  It does not create any networks, security groups, or load balancers on vSphere.",
            "title": "Getting Started: vSphere"
        },
        {
            "location": "/getting-started-vsphere/#create-a-jumpbox-and-a-bosh-director",
            "text": "Export environment variables.\n     export BBL_IAAS=vsphere\n    export BBL_VSPHERE_VCENTER_USER\n    export BBL_VSPHERE_VCENTER_PASSWORD\n    export BBL_VSPHERE_VCENTER_IP\n    export BBL_VSPHERE_VCENTER_DC\n    export BBL_VSPHERE_VCENTER_CLUSTER\n    export BBL_VSPHERE_VCENTER_RP\n    export BBL_VSPHERE_NETWORK\n    export BBL_VSPHERE_VCENTER_DS\n    export BBL_VSPHERE_SUBNET\n    export BBL_VSPHERE_VCENTER_DISKS\n    export BBL_VSPHERE_VCENTER_TEMPLATES\n    export BBL_VSPHERE_VCENTER_VMS    Create jumpbox and bosh director.\n     bbl up",
            "title": "Create a Jumpbox and a BOSH Director"
        },
        {
            "location": "/getting-started-vsphere/#next-steps",
            "text": "Target the BOSH Director",
            "title": "Next Steps"
        },
        {
            "location": "/howto-ssh/",
            "text": "How To SSH\n\n\nTo the Jumpbox\n\n\nThis command shells out to \nssh\n to initiate an interactive ssh session to the jumpbox vm.\n\n\nbbl ssh --jumpbox\n\n\n\n\nTo the BOSH Director\n\n\nThis command will shell out to \nssh\n twice. On the first invocation, it will open a tunnel forwarding a random port to the jumpbox.\n\n\nOn the second invocation, it initiates an interactive ssh session through that port to ssh to the director.\n\n\nbbl ssh --director\n\n\n\n\nTo BOSH-Deployed VMs\n\n\nbbl print-env\n prints out environment variables (\nBOSH_ALL_PROXY\n, \nBOSH_CLIENT\n, \nBOSH_CLIENT_SECRET\n, and others)\nthat need to be exported to \nbosh ssh\n to a job vm using the bosh-cli.\n\n\nEvaluating the command output sets those variables in your environment.\n\n\neval \n$(bbl print-env)\n\nbosh ssh web/0\n\n\n\n\nWhen you run \nbosh ssh web/0\n, the following happens:\n\n\n\n\n\n\nThe bosh-cli parses \nBOSH_ALL_PROXY\n and determines from the \nssh+socks5://\n scheme that it should proxy through a jumpbox via a tunnel of its own making.\n\n\n\n\n\n\nThe bosh-cli uses some go libraries to start a socks5 proxy on another goroutine. This socks5 proxy is backed by an ssh tunnel from your local machine to the jumpbox.\n\n\n\n\n\n\nThe bosh-cli uses your system's openssh \nssh\n \"ProxyCommand\" option and bsd \nnc -x\n to open an additional tunnel to \nweb/0\n through that socks5 proxy.\n\n\n\n\n\n\nWhen \nssh\n exits after you ctrl-D or your ttyless command exits, the bosh-cli exits and the socks5 proxy stops with it.\n\n\n\n\n\n\nFor http requests to the bosh director, the bosh-cli reads \nBOSH_ALL_PROXY=ssh+socks5://\n\nand uses golang's \nssh.Client.Dial\n in the cli's http.Client to send each http request\nto the director through an ssh tunnel between your local machine and the jumpbox.\n\n\nTroubleshooting\n\n\n\n\n\n\nIt is not necessary to set BOSH_GW_HOST and other old-style \nbosh ssh\n variables. Unset them.\n\n\n\n\n\n\nThe ubuntu stemcell allows a maximum of three login attempts, so ensure you do not have a lot of keys in your SSH keyring. \nssh-add -D\n can clear them all.",
            "title": "How To SSH"
        },
        {
            "location": "/howto-ssh/#how-to-ssh",
            "text": "",
            "title": "How To SSH"
        },
        {
            "location": "/howto-ssh/#to-the-jumpbox",
            "text": "This command shells out to  ssh  to initiate an interactive ssh session to the jumpbox vm.  bbl ssh --jumpbox",
            "title": "To the Jumpbox"
        },
        {
            "location": "/howto-ssh/#to-the-bosh-director",
            "text": "This command will shell out to  ssh  twice. On the first invocation, it will open a tunnel forwarding a random port to the jumpbox.  On the second invocation, it initiates an interactive ssh session through that port to ssh to the director.  bbl ssh --director",
            "title": "To the BOSH Director"
        },
        {
            "location": "/howto-ssh/#to-bosh-deployed-vms",
            "text": "bbl print-env  prints out environment variables ( BOSH_ALL_PROXY ,  BOSH_CLIENT ,  BOSH_CLIENT_SECRET , and others)\nthat need to be exported to  bosh ssh  to a job vm using the bosh-cli.  Evaluating the command output sets those variables in your environment.  eval  $(bbl print-env) \nbosh ssh web/0  When you run  bosh ssh web/0 , the following happens:    The bosh-cli parses  BOSH_ALL_PROXY  and determines from the  ssh+socks5://  scheme that it should proxy through a jumpbox via a tunnel of its own making.    The bosh-cli uses some go libraries to start a socks5 proxy on another goroutine. This socks5 proxy is backed by an ssh tunnel from your local machine to the jumpbox.    The bosh-cli uses your system's openssh  ssh  \"ProxyCommand\" option and bsd  nc -x  to open an additional tunnel to  web/0  through that socks5 proxy.    When  ssh  exits after you ctrl-D or your ttyless command exits, the bosh-cli exits and the socks5 proxy stops with it.    For http requests to the bosh director, the bosh-cli reads  BOSH_ALL_PROXY=ssh+socks5:// \nand uses golang's  ssh.Client.Dial  in the cli's http.Client to send each http request\nto the director through an ssh tunnel between your local machine and the jumpbox.",
            "title": "To BOSH-Deployed VMs"
        },
        {
            "location": "/howto-ssh/#troubleshooting",
            "text": "It is not necessary to set BOSH_GW_HOST and other old-style  bosh ssh  variables. Unset them.    The ubuntu stemcell allows a maximum of three login attempts, so ensure you do not have a lot of keys in your SSH keyring.  ssh-add -D  can clear them all.",
            "title": "Troubleshooting"
        },
        {
            "location": "/howto-target-bosh-director/",
            "text": "How To Target The BOSH Director\n\n\nThe easy way: \nbbl print-env\n\n\neval \n$(bbl print-env)\n\n\n\n\n\nAlternatives to \nbbl print-env\n\n\nSeparate commands are available for the \nbbl print-env\n fields:\n\n\n$ bbl director-address\nhttps://10.0.0.6:25555\n\n$ bbl director-username\nuser-d3783rk\n\n$ bbl director-password\np-23dah71skl\n\n$ bbl director-ca-cert\n-----BEGIN CERTIFICATE-----\nMIIDtzCCAp+gAwIBAgIJAIPgaUgWRCE8MA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNV\n...\n-----END CERTIFICATE-----\n\n\n\n\nYou might save the CA certificate to a file:\n\n\n$ bbl director-ca-cert \n bosh.crt\n$ export BOSH_CA_CERT=bosh.crt\n\n\n\n\nTo login:\n\n\n$ export BOSH_ENVIRONMENT=$(bbl director-address)\n$ bosh alias-env \nINSERT TARGET NAME\n\n$ bosh log-in\nUsername: user-d3783rk\nPassword: p-23dah71sk1\n\n\n\n\nNow you're ready to deploy software with BOSH.",
            "title": "How To Target The BOSH Director"
        },
        {
            "location": "/howto-target-bosh-director/#how-to-target-the-bosh-director",
            "text": "",
            "title": "How To Target The BOSH Director"
        },
        {
            "location": "/howto-target-bosh-director/#the-easy-way-bbl-print-env",
            "text": "eval  $(bbl print-env)",
            "title": "The easy way: bbl print-env"
        },
        {
            "location": "/howto-target-bosh-director/#alternatives-to-bbl-print-env",
            "text": "Separate commands are available for the  bbl print-env  fields:  $ bbl director-address\nhttps://10.0.0.6:25555\n\n$ bbl director-username\nuser-d3783rk\n\n$ bbl director-password\np-23dah71skl\n\n$ bbl director-ca-cert\n-----BEGIN CERTIFICATE-----\nMIIDtzCCAp+gAwIBAgIJAIPgaUgWRCE8MA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNV\n...\n-----END CERTIFICATE-----  You might save the CA certificate to a file:  $ bbl director-ca-cert   bosh.crt\n$ export BOSH_CA_CERT=bosh.crt  To login:  $ export BOSH_ENVIRONMENT=$(bbl director-address)\n$ bosh alias-env  INSERT TARGET NAME \n$ bosh log-in\nUsername: user-d3783rk\nPassword: p-23dah71sk1  Now you're ready to deploy software with BOSH.",
            "title": "Alternatives to bbl print-env"
        },
        {
            "location": "/known-issues/",
            "text": "Known issues\n\n\nMigrating from bbl v4.x to v5.x on AWS\n\n\nAn issue was discovered in \nv5.6.0\n where the NAT security\ngroup rules were getting deleted, which prevents VMs deployed\nby BOSH from being able to access the internet.\n\n\nThe issue is fixed in \nv5.10.0\n and above, but the fix introduces\na breaking change when migrating from \nv4.x\n where manual intervention\nis required in order for \nbbl up\n to succeed.\n\n\nIf you are upgrading an existing bbl environment on AWS from \nv4.x\n to \nv5.x\n\nyou may see an error during \nbbl up\n that looks like the following:\n\n\nError: Error applying plan:\n\n3 error(s) occurred:\n\n* aws_security_group_rule.nat_udp_rule: 1 error(s) occurred:\n\n* aws_security_group_rule.nat_udp_rule: [WARN] A duplicate Security Group rule was found on (sg-f424bc88). This may be\na side effect of a now-fixed Terraform issue causing two security groups with\nidentical attributes but different source_security_group_ids to overwrite each\nother in the state. See https://github.com/hashicorp/terraform/pull/2376 for more\ninformation and instructions for recovery. Error message: the specified rule \npeer: sg-1b20b867, UDP, from port: 0, to port: 65535, ALLOW\n already exists\n...\n\n\n\n\nThe fix is to manually delete the security group rules for the NAT box.\n\n\n\n\nLog into the AWS console\n\n\nGo to the Networking and Security \n Security Groups page\n\n\nSelect the NAT security group (\n${env-id}-nat-security-group\n)\n\n\nClick Inbound, then Edit, then remove all 3 security group rules\n\n\nClick Outboud, then Edit, then remove the 1 security group rule\n\n\n\n\nAfter doing the above, \nbbl up\n should work again.\n\n\nIf you have previously run \nbbl up\n with version \nv5.0.x\n-\nv5.8.x\n, and\nyou currently do not have any NAT security groups rules, run \nbbl plan\n\nwith \nv5.10.x+\n to generate the terraform template with the fix, and then\nrun \nbbl up\n to apply the plan.",
            "title": "Known issues"
        },
        {
            "location": "/known-issues/#known-issues",
            "text": "",
            "title": "Known issues"
        },
        {
            "location": "/known-issues/#migrating-from-bbl-v4x-to-v5x-on-aws",
            "text": "An issue was discovered in  v5.6.0  where the NAT security\ngroup rules were getting deleted, which prevents VMs deployed\nby BOSH from being able to access the internet.  The issue is fixed in  v5.10.0  and above, but the fix introduces\na breaking change when migrating from  v4.x  where manual intervention\nis required in order for  bbl up  to succeed.  If you are upgrading an existing bbl environment on AWS from  v4.x  to  v5.x \nyou may see an error during  bbl up  that looks like the following:  Error: Error applying plan:\n\n3 error(s) occurred:\n\n* aws_security_group_rule.nat_udp_rule: 1 error(s) occurred:\n\n* aws_security_group_rule.nat_udp_rule: [WARN] A duplicate Security Group rule was found on (sg-f424bc88). This may be\na side effect of a now-fixed Terraform issue causing two security groups with\nidentical attributes but different source_security_group_ids to overwrite each\nother in the state. See https://github.com/hashicorp/terraform/pull/2376 for more\ninformation and instructions for recovery. Error message: the specified rule  peer: sg-1b20b867, UDP, from port: 0, to port: 65535, ALLOW  already exists\n...  The fix is to manually delete the security group rules for the NAT box.   Log into the AWS console  Go to the Networking and Security   Security Groups page  Select the NAT security group ( ${env-id}-nat-security-group )  Click Inbound, then Edit, then remove all 3 security group rules  Click Outboud, then Edit, then remove the 1 security group rule   After doing the above,  bbl up  should work again.  If you have previously run  bbl up  with version  v5.0.x - v5.8.x , and\nyou currently do not have any NAT security groups rules, run  bbl plan \nwith  v5.10.x+  to generate the terraform template with the fix, and then\nrun  bbl up  to apply the plan.",
            "title": "Migrating from bbl v4.x to v5.x on AWS"
        },
        {
            "location": "/upgrade/",
            "text": "Upgrade\n\n\nIn order to use a later version of \nbbl\n against an older\n\nbbl\n environment/state directory, you will need to run\n\nbbl plan\n before running \nbbl up\n.\n\n\nbbl plan\n just writes the latest files and state directory structure.\n\n\nbbl up\n is the applier. It will run \nterraform apply\n,\n\nbosh create-env\n, and \nbosh update-cloud-config\n.\n\n\nExample\n\n\nbbl5 up --lb-type cf --lb-cert cert --lb-key key --lb-domain domain.com\n\n# some time passes\n\nbbl6 plan --lb-type cf --lb-cert cert --lb-key key --lb-domain domain.com\nbbl6 up\n\nbbl6 destroy",
            "title": "Upgrade"
        },
        {
            "location": "/upgrade/#upgrade",
            "text": "In order to use a later version of  bbl  against an older bbl  environment/state directory, you will need to run bbl plan  before running  bbl up .  bbl plan  just writes the latest files and state directory structure.  bbl up  is the applier. It will run  terraform apply , bosh create-env , and  bosh update-cloud-config .",
            "title": "Upgrade"
        },
        {
            "location": "/upgrade/#example",
            "text": "bbl5 up --lb-type cf --lb-cert cert --lb-key key --lb-domain domain.com\n\n# some time passes\n\nbbl6 plan --lb-type cf --lb-cert cert --lb-key key --lb-domain domain.com\nbbl6 up\n\nbbl6 destroy",
            "title": "Example"
        }
    ]
}